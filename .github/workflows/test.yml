name: test

on:
  schedule:
    - cron:  '0 */6 * * *'
  workflow_dispatch:
    inputs:
      args:
        description: "Anitester extra arguments"
        default: ""
        required: false
      lang:
        description: "Language of extensions to test (like es/en/pt, only one)"
        default: ""
        required: false
      git-repo:
        description: "Custom tester repo (default: Claudemirovsky/aniyomi-extensions-tester)"
        default: ""
        required: false

jobs:
  prepare:
    name: Prepare job
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
      jar: ${{ steps.get-jar.outputs.jar }}
    steps:
      - name: generate matrix
        id: gen-matrix
        run: |
          wget 'https://raw.githubusercontent.com/ahmedgamal17/aniyomi-extensions/repo/index.min.json'

          BATCHES=$(jq -cr '
          {
              batches: [
                  map(
                      select(.lang | test("${{ github.event.inputs.lang }}")) # Filter by language
                      | .apk # Get apk filename
                  ) | _nwise(5) # Split in chunks of 5 items each
              ] | to_entries | map({apks:.value, index:.key}) # [[apk1, apk2..], [apk3, apk4...]] -> [{apks: [apk1, apk2..], index: 0}, ...]
          }' index.min.json)
          echo "matrix=$BATCHES" >> $GITHUB_OUTPUT

      - name: get tester jar
        id: get-jar
        env:
          TESTER_REPO: Claudemirovsky/aniyomi-extensions-tester
        run: |
          if [[ '${{ github.event.inputs.git-repo }}' != '' ]]; then
             TESTER_REPO='${{ github.event.inputs.git-repo }}'
          fi
          API_URL="https://api.github.com/repos/$TESTER_REPO/releases/latest"
          wget --header='authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' $API_URL -O latest.json
          JAR=$(jq -cr '.assets[0].browser_download_url' latest.json)
          echo "jar=$JAR" >> $GITHUB_OUTPUT

  test_batches:
    name: test batches of extensions
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: zulu

      - name: dl tester
        run: |
          JAR=${{ needs.prepare.outputs.jar }}
          wget $JAR -O tester.jar

      - name: dl apks
        id: dl-apks
        run: |
          APKS='${{ toJSON(matrix.batches) }}'
          INDEX=$(jq -cr '.index' <<< $APKS)
          echo "index=$INDEX" >> $GITHUB_OUTPUT
          jq -cr '.apks | .[]' <<< $APKS | while read link; do
            wget https://raw.githubusercontent.com/ahmedgamal17/aniyomi-extensions/repo/apk/$link -P apk/
          done

      - name: test apks
        run: |
          Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
          export DISPLAY=:99.0
          EXTRA_ARGS=""
          if [[ -n "${{ secrets.PREFERENCES }}" ]]; then
              echo -e '${{ secrets.PREFERENCES }}' > preferences.json
              EXTRA_ARGS+="--prefs preferences.json "
          fi
          if [[ -n "${{ secrets.COOKIES }}" ]]; then
              echo -e '${{ secrets.COOKIES }}' > cookies.txt
              EXTRA_ARGS+="--cookies cookies.txt "
          fi
          # java -jar tester.jar apk -C -D json -P -d
          java -jar tester.jar apk --complete-results --json-dir json --pretty-json --debug $EXTRA_ARGS ${{ github.event.inputs.args }}

      - name: upload results
        uses: actions/upload-artifact@v3
        with:
          name: "results-${{ steps.dl-apks.outputs.index }}"
          path: "json/"
          retention-days: 1

  generate_results:
    name: generate the results
    needs: test_batches
    runs-on: ubuntu-latest
    env:
      COUNT_PASSED: 0
      COUNT_ALL: 0
      TABLEJSON: "results.table.ndjson"
      TMPFILE: "results.json.tmp"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: results

      - name: get results
        uses: actions/download-artifact@v3

      - name: check results and make index results file
        run: |
          set -x

          echo '[' > $TMPFILE
          [[ -e results ]] && rm -rf results
          mkdir -p results
          mv results-*/*.json results/
          rm -df results-*

          for file in results/*.json; do
              COUNT_ALL=$((COUNT_ALL+1))
              PKGJSON=$(printf '%s\n' "${file#results/results-}")
              PKG=$(printf '%s\n' "${PKGJSON%.json}")
              COUNT=$(jq -cr 'length' $file) # amount of generated sources
              PASSED_COUNT=$(jq -cr '
              map(
                .results 
                | map(select(.passed != true)) # Select failures
                | length
              )
              | map(select(. == 0)) # Select generated sources without any failure
              | length' $file)
              if [[ "$COUNT" == "$PASSED_COUNT" ]]; then
                  COUNT_PASSED=$((COUNT_PASSED+1))
                  PASSED=true
                  PASSEDEMOJI=✅
              else
                  PASSED=false
                  total_tests=$(jq -cr "map(.results | length) | add" $file)
                  total_success=$(jq -cr "map(.results | map(select(.passed == true)) | length) | add" $file)
                  PASSEDEMOJI="❌<br>$total_success/$total_tests"
              fi
              URL=https://raw.githubusercontent.com/$GITHUB_REPOSITORY/results/results/results-$PKGJSON
              echo "{\"pkg\":\"$PKG\",\"passed\":$PASSED,\"log\":\"$URL\"}," >> $TMPFILE
              echo "{\"Extension\":\"$PKG\",\"Status\":\"$PASSEDEMOJI\",\"Log\":\"[results-$PKGJSON]($URL)\"}" >> $TABLEJSON
          done
          sed -i '$ s/.$//' $TMPFILE
          echo ']' >> $TMPFILE
          jq '.' $TMPFILE > results.json
          rm $TMPFILE
          echo "COUNT_ALL=$COUNT_ALL" >> $GITHUB_ENV
          echo "COUNT_PASSED=$COUNT_PASSED" >> $GITHUB_ENV

          
      - name: make table
        run: |
          npm i -g tablemark-cli
          count="$COUNT_PASSED/$COUNT_ALL"
          percent=$(printf "%.0f" $(echo "($count) * 100" | bc -l))
          printf "## Extension status\n\n### $count($percent%%) are working\n\n" > README.md
          tablemark $TABLEJSON -a left -a center -a left >> README.md
          rm $TABLEJSON

      - name: commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Update result files"
          git push
